var Neo4J = require("../build");
var data = require("../private/passwords.json");

/*
 * This interacts with a real Neo4J database, it doesn't affect the database
 * but it does use it to bounce queries off back to the parser. You must have
 * a neo4j database running somewhere and be able to connect to its restful
 * interface. If your not interested in much of any setup, the class is already
 * preconfigured to connect with the defaults although in the case of quick setup
 * for the database you must connect to the web interface and set the first-time
 * password as required by Neo4J.
 *
 * This expects a folder called private to be created at the root project level.
 * In this folder a file called passwords.json needs to exist to contain the
 * username, password, and url under a "db" key. You can set the keys to all
 * undefined if you wish to use the class defaults.
 */

describe("Neo4J class", function()
{
    beforeEach(function()
    {
        this.neo4J = new Neo4J({
            username: data.db.username,
            password: data.db.password,
            url: data.db.url
        });
    });

    describe("Instiation", function()
    {
        it("should instiate without errors", function()
        {
            var inst = function()
            {
                this.neo4J = new Neo4J();
            };

            expect(inst).not.toThrow();
        });

        it("should instiate correctly", function()
        {
            expect(this.neo4J.username).toEqual(data.db.username);
            expect(this.neo4J.password).toEqual(data.db.password);
            expect(this.neo4J.url).toEqual(data.db.url);
        });
    });

    describe("update method", function()
    {
        it("should have default credentials", function()
        {
            ver tmp = new Neo4J();

            expect(tmp.username).toEqual("neo4j");
            expect(tmp.password).toEqual("neo4j");
            expect(tmp.url).toEqual("http://localhost:7474");
        });

        it("should not have updated password credentials", function()
        {
            this.neo4J.updateCredentials(undefined, undefined, "completely fake url");

            expect(this.neo4J.url).not.toEqual("completely fake url");

            expect(this.neo4J.username).toEqual(data.db.username);
            expect(this.neo4J.password).toEqual(data.db.password);
            expect(this.neo4J.url).toEqual(data.db.url);
        });

        it("should have all updated credentials", function()
        {
            this.neo4J.updateCredentials("User1", "Password1", "http://fake-url:12345");

            expect(this.neo4J.username).toEqual("User1");
            expect(this.neo4J.password).toEqual("Password1");
            expect(this.neo4J.url).toEqual("http://fake-url:12345");
        });
    });

    it("should reset output", function()
    {
        this.neo4J.queryObjs = "blah";
        this.neo4J.resetOutput();
        expect(this.neo4J.queryObjs).toEqual([]);
    });

    it("tools should exist statically", function()
    {
        expect(Neo4J.tools).toBeDefined();
        expect(Neo4J.tools.objToString).toBeDefined();
        expect(Neo4J.tools.objToParams).toBeDefined();
    });

    describe("addQuery method", function()
    {
        it("test add simlple query worked correctly", function()
        {
            this.neo4J.addQuery("match a return a");

            expect(this.neo4J.queryObjs.length).toEqual(1);

            var queryObj = this.neo4J.queryObjs[0];

            expect(queryObj.query).toEqual("match a return a");
            expect(queryObj.parameters).toEqual({});
            expect(queryObj.raw).toEqual(false);
            expect(queryObj.meta).toEqual({});
        });

        it("test cb on simlple query with cb", function(done)
        {
            var tmpCb = function(done)
            {
                done();
            }

            this.neo4J.addQuery("match a return a", tmpCb.bind(this, done));

            expect(this.neo4J.queryObjs.length).toEqual(1);
            expect(this.neo4J.queryObjs[0].cb).toBeDefined();
            expect(this.neo4J.queryObjs[0].cb).not.toThrow();
        });

        it("test add simlple query with cb and parameters worked correctly", function()
        {
            this.neo4J.addQuery("match a return a", function() {}, {
                test: 123,
                hello: "world"
            });

            expect(this.neo4J.queryObjs.length).toEqual(1);

            var queryObj = this.neo4J.queryObjs[0];

            expect(queryObj.query).toEqual("match a return a");
            expect(queryObj.parameters).toEqual({
                test: 123,
                hello: "world"
            });
            expect(queryObj.raw).toEqual(false);
            expect(queryObj.meta).toEqual({});
        });

        it("test add simlple query with cb, parameters, raw, and meta worked correctly", function()
        {
            this.neo4J.addQuery("match a return a", function() {}, {
                test: 123,
                hello: "world"
            }, true, {meta1: "meta2"});

            expect(this.neo4J.queryObjs.length).toEqual(1);

            var queryObj = this.neo4J.queryObjs[0];

            expect(queryObj.query).toEqual("match a return a");
            expect(queryObj.parameters).toEqual({
                test: 123,
                hello: "world"
            });
            expect(queryObj.raw).toEqual(true);
            expect(queryObj.meta).toEqual({
                meta1: "meta2"
            });
        });
    });

    it("test reportErrors on simlple queries with cb", function(done)
    {
        var tmpCb = function(done, error)
        {
            expect(error).toEqual("Oh no!");
        }

        var tmpCb2 = function(done, error)
        {
            expect(error).toEqual("Oh no!");
            done();
        }

        this.neo4J.addQuery("match a return a", tmpCb.bind(this, done));
        this.neo4J.addQuery("match b return b", tmpCb2.bind(this, done));

        expect(this.neo4J.reportErrors.bind(this.neo4J, "Oh no!")).not.toThrow();
    });

    describe("commit method", function()
    {
        it("should successfully execute a simple query", function(done)
        {
            var cb = function(done, err, queryObj)
            {
                expect(err).toBeFalsy();
                expect(queryObj).toBeTruthy();
                expect(arguments.length).toEqual(3);
                done();
            };

            this.neo4J.addQuery('return {hello: "world"}', cb.bind(this, done));
            expect(this.neo4J.commit.bind(this.neo4J)).not.toThrow();
        });

        it("should successfully execute a simple raw query", function(done)
        {
            var cb = function(done, err, queryObj)
            {
                expect(arguments.length).toEqual(3);
                expect(err).toBeFalsy();

                expect(queryObj.result).not.toBeDefined();
                expect(queryObj.rawResult).toBeDefined();
                expect(queryObj.rawBody).toBeDefined();
                expect(queryObj.firstColumn).not.toBeDefined();
                expect(queryObj.firstValue).not.toBeDefined();
                expect(queryObj.queryObj).toBeDefined();

                done();
            };

            this.neo4J.addQuery('return {hello: "world"}', cb.bind(this, done));
            expect(this.neo4J.commit.bind(this.neo4J, true)).not.toThrow();
        });

        it("should have correct response structure to very complex query", function(done)
        {
            var cb = function(done, err, queryObj)
            {
                expect(arguments.length).toEqual(3);
                expect(err).toBeFalsy();

                expect(queryObj.result).toEqual({
                    primitives: {
                        0: 1,
                        1: [1,2,3],
                        2: "a",
                        3: ["a", "b", "c"],
                        4: "primitive"
                    },

                    complex: {
                        a: "duplicate key 1",
                        a0: "duplicate key 2",
                        a1: "duplicate key 3",
                        b: "non-duplicate key 1",
                        0: "complex"
                    }
                });

                done();
            };

            /*
             * This query tests the entirety of the parsing code.
             * The result from this query tests the parsers ability to
             * piece together multiple columns correctly in addition mangling
             * duplicate keys properly, merging objects into columns, handling
             * non-object and assigning correct id to non-object based on column.
             * Identifying arrays as non-objects and handling them accordingly,
             * among other internal tests.
             *
             * If the parser parses the following correctly it can successfully
             * parse a result ranging from simple to complex.
             */
            var query =
                'return 1 as primitives,' +
                '\n		{a: "duplicate key 1"} as complex' +
                '\nunion' +
                '\nreturn [1,2,3] as primitives,' +
                '\n		{a: "duplicate key 2"} as complex' +
                '\nunion' +
                '\nreturn "a" as primitives,' +
                '\n		{a: "duplicate key 3"} as complex' +
                '\nunion' +
                '\nreturn ["a", "b", "c"] as primitives,' +
                '\n		{b: "non-duplicate key 1"} as complex' +
                '\nunion' +
                '\nreturn "primitive" as primitives,' +
                '\n		"complex" as complex';

            this.neo4J.addQuery(query, cb.bind(this, done));
            expect(this.neo4J.commit.bind(this.neo4J)).not.toThrow();
        });
    });
});
